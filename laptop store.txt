								Laptop Store

A) Following is the requirement specifications:
	1 Create a Laptop
	2 Update the existing Laptop details
	3 Get the Laptop by Id
	4 Get all Laptops
	5 Delete a Laptop
	6 Search for Laptop by Laptop name
	7 Search for Laptop by price
	8 Search for Laptop by brand

B) LAPTOP CONSTRAINTS
	● When fetching a Laptop by ID, if the laptop ID does not exist, the operation should throw a custom exception.
	● When updating a Laptop, if the laptop ID does not exist, the operation should throw a custom exception.	
	● When removing a Laptop, if the laptop ID does not exist, the operation should throw a custom exception.

C)Common Constraints
	● For all rest endpoints receiving @RequestBody, VALIDATION check must be done and must throw custom exception if data is invalid.
	● All the business validations must be implemented in DTO classes only.
	● All the database operations must be implemented on ENTITY OBJECT only.
	● Do not change, add, remove any existing methods in SERVICE layer.
	● In Repository interfaces, custom methods can be added as per requirements.
	● All RestEndpoint methods and Exception Handlers must return data wrapped in ResponseEntity. 

D) BUSINESS VALIDATIONS
	● Name is not null, min 3 and max 20 characters.
	● Price should not be null, should be a non-negative value and should not exceed 9999.
	● Brand is not null.
	● Storage is not null.
	● RAM is not null.
	● Processor is not null.

E) CONTROLLER(URL Exposed)
	1. /laptops				|  Fetches all the laptops
	2. /laptops				|  Add a new laptop
	3. /laptops/{id}			|  Fetches the laptop with the given id
	4. /laptops/{id}			|  Updates existing Laptop info
	5. /laptops/{id}			|  Delete laptop with given laptop id
	6. /laptops/search?name={name}		|  Search the laptop with the given name
	7. /laptops/search?price={price}		|  Search the laptop with the given price
	8. /laptops/search?brand={brand}	|  Search the laptop with the given brand


x-----------------x-------------------------x----------------------------------------------------x

Concept:

what is this optional?

Ans) 
1. Optional is a container object introduced in Java 8 that can hold a value or be empty. It is used to represent the presence or absence of a value in a type-safe way, reducing the risk of NullPointerException. Let's explore the concept of Optional in more detail.

2. Purpose of Optional: The main purpose of Optional is to provide a clear way to indicate that a value may or may not be present, and to handle such cases more elegantly than using null directly.

3. Creating an Optional: You can create an Optional in several ways:

4. Empty Optional: Optional<String> empty = Optional.empty();

5. Non-Empty Optional:  Optional<String> nonEmpty = Optional.of("Hello");

6. Optional that May Be Null:  Optional<String> nullable = Optional.ofNullable(someString);

Common Methods of Optional
	1) isPresent(): Checks if a value is present.

		if (optional.isPresent()) {
		    // Do something with the value
		}
	
	2) ifPresent(): Executes a block of code if a value is present.

		optional.ifPresent(value -> {
		    // Do something with the value
		});

	3) orElse(): Returns the value if present, otherwise returns a default value.

		String result = optional.orElse("Default Value");
	
	4)  rElseGet(): Returns the value if present, otherwise returns a value generated by a supplier.

		String result = optional.orElseGet(() -> "Generated Default Value");


	5)  orElseThrow(): Returns the value if present, otherwise throws an exception.

		String result = optional.orElseThrow(() -> new RuntimeException("Value not present"));


	6)  map(): Transforms the value if present, using a provided function.

		Optional<Integer> length = optional.map(String::length);
 




x-----------------x-------------------------x----------------------------------------------------x

Service class

@Service
public interface LaptopService {

	List<LaptopDTO> getAllLaptop();

	LaptopDTO createLaptop(LaptopDTO laptopDTO);

	LaptopDTO getLaptopById(Long id);

	LaptopDTO updateLaptop(LaptopDTO laptopDTO, Long id);

	Map<String, Boolean> delete(Long id);

	List<LaptopDTO> searchLaptopByName(String name);
	
	List<LaptopDTO> searchLaptopByPrice(Double price);
	
	List<LaptopDTO> searchLaptopByBrand(String brand);
}

x-----------------x-------------------------x----------------------------------------------------x

 ServiceImpl class

@Service
public class LaptopServiceImpl implements LaptopService {

	private final LaptopRepository laptopRepository;
	private final ModelMapper modelMapper;
	
	
	public LaptopServiceImpl(LaptopRepository laptopRepository, ModelMapper modelMapper) {
		super();
		this.laptopRepository = laptopRepository;
		this.modelMapper = modelMapper;
	}


	@Override
	public List<LaptopDTO> getAllLaptop() {
		return laptopRepository.findAll()
				.stream()
				.map(laptop -> modelMapper.map(laptop,LaptopDTO.class))
				.collect(Collectors.toList());
	}

	@Override
	public LaptopDTO createLaptop(LaptopDTO laptopDTO) {
		Laptop laptop = modelMapper.map(laptopDTO, Laptop.class);
		Laptop savedLaptop = laptopRepository.save(laptop);
		return modelMapper.map(savedLaptop, LaptopDTO.class);
	}

	@Override
	public LaptopDTO getLaptopById(Long id) {
		return laptopRepository.findById(id)
				.map(laptop -> modelMapper.map(laptop,LaptopDTO.class))
				.orElseThrow(() -> new ResourceNotFoundException("Laptop Not found with id: "+ id));
			
	}

//Here is concept of optional container is used.
//	@Override
//	public LaptopDTO updateLaptop(Long id, LaptopDTO laptopdto) {
//		Optional<Laptop> optionalLaptop = laptopRepository.findById(id);
//		if(optionalLaptop.isPresent()) {
//			Laptop laptop = optionalLaptop.get();
//			laptop.setName(laptopdto.getName());
//			laptop.setPrice(laptopdto.getPrice());
//			laptop.setBrand(laptopdto.getBrand());
//			laptop.setStorage(laptopdto.getStorage());
//			laptop.setRam(laptopdto.getRam());
//			laptop.setProcessor(laptopdto.getProcessor());
//			
//			Laptop updatedLaptop = laptopRepository.save(laptop);
//			return modelMapper.map(updatedLaptop, LaptopDTO.class);
//		}
//		throw new ResourceNotFoundException("Laptop not found with id:" +id);
//	}

	@Override
	public LaptopDTO updateLaptop(LaptopDTO laptopDTO, Long id) {
		return laptopRepository.findById(id)
				.map(laptop ->{
					laptop.setName(laptopDTO.getName());
					laptop.setBrand(laptopDTO.getName());
					laptop.setPrice(laptopDTO.getPrice());
					laptop.setProcessor(laptopDTO.getProcessor());
					laptop.setRam(laptopDTO.getRam());
					laptop.setStorage(laptopDTO.getStorage());
					Laptop updatedLaptop = laptopRepository.save(laptop);
					return modelMapper.map(updatedLaptop, LaptopDTO.class);
				})
				.orElseThrow(() -> new ResourceNotFoundException("Laptop Not found with id: "+ id));
	}

	@Override
	public Map<String, Boolean> delete(Long id) {
		return laptopRepository.findById(id)
				.map(laptop -> {
						laptopRepository.delete(laptop);
						Map<String, Boolean> response = new HashMap<>();
						response.put("Laptop Deleted", Boolean.TRUE);
						return response;
				})
				.orElseThrow(() -> new ResourceNotFoundException("Laptop Not found with id: "+ id));
				
	}


	@Override
	public List<LaptopDTO> searchLaptopByName(String name) {
		return laptopRepository.findByName(name)
				.stream()
				.map(laptop -> modelMapper.map(laptop,LaptopDTO.class))
				.collect(Collectors.toList());
	}


	@Override
	public List<LaptopDTO> searchLaptopByPrice(Double price) {
		return laptopRepository.findByPrice(price)
				.stream()
				.map(laptop -> modelMapper.map(laptop,LaptopDTO.class))
				.collect(Collectors.toList());
	}


	@Override
	public List<LaptopDTO> searchLaptopByBrand(String brand) {
		return laptopRepository.findByBrand(brand)
				.stream()
				.map(laptop -> modelMapper.map(laptop,LaptopDTO.class))
				.collect(Collectors.toList());
	}	
}
x-----------------x-------------------------x----------------------------------------------------x

Controller

@RestController
@RequestMapping("/laptops")
@CrossOrigin
public class LaptopController {
	
	private final LaptopService laptopService;

	public LaptopController(LaptopService laptopService) {
		super();
		this.laptopService = laptopService;
	}
	
	@GetMapping()
	public ResponseEntity<List<LaptopDTO>> getAllLaptop() {
		List<LaptopDTO> laptops = laptopService.getAllLaptop();
		return new ResponseEntity<>(laptops,HttpStatus.OK);
	}
	
	@PostMapping()
	public ResponseEntity<LaptopDTO> createLaptop(@Valid @RequestBody LaptopDTO laptopDTO){
		LaptopDTO savedLaptop = laptopService.createLaptop(laptopDTO);
		return new ResponseEntity<>(savedLaptop,HttpStatus.OK);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<LaptopDTO> getLaptopById(@PathVariable("id") Long id){
		LaptopDTO laptopDTO = laptopService.getLaptopById(id);
		return new ResponseEntity<>(laptopDTO,HttpStatus.OK);
	}

// There are some extra line of code which is used to display custom message when the validation of provided JSON data is failed .
//	@PutMapping("/{id}")
//	public ResponseEntity<?> updateLaptop(@PathVariable("id") Long id, @Valid @RequestBody LaptopDTO laptopdto, BindingResult result){
//		List<String> displayErrors = new ArrayList<String>();
//		
//		if (result.hasErrors()) {
//			List<FieldError> errors = result.getFieldErrors();
//			
//			for(FieldError err:errors) {
//				displayErrors.add(err.getField() + ": " + err.getDefaultMessage());
//				System.out.println( displayErrors);
//			}
//			
//			return ResponseEntity.badRequest().body(displayErrors);
//		}
//		
//		LaptopDTO laptop = laptopService.updateLaptop(id, laptopdto);
//		return new ResponseEntity<>(laptop, HttpStatus.OK);
//		
//	}

	
	@PutMapping("/{id}")
	public ResponseEntity<LaptopDTO> updateLaptop(@Valid @RequestBody LaptopDTO laptopDTO, @PathVariable Long id) {
		LaptopDTO updatedLaptop = laptopService.updateLaptop(laptopDTO, id);
		return new ResponseEntity<>(updatedLaptop,HttpStatus.OK);
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Map<String,Boolean>> delete(@PathVariable("id") Long id){
		Map<String,Boolean> response = laptopService.delete(id);
		return new ResponseEntity<>(response,HttpStatus.OK);
		
	}
	
	@GetMapping("/search")
	public ResponseEntity<List<LaptopDTO>> searchLaptop(
	        @RequestParam(value = "name", required = false) String name,
	        @RequestParam(value = "price", required = false) Double price,
	        @RequestParam(value = "brand", required = false) String brand) {
	    
	    List<LaptopDTO> laptops = new ArrayList<>();
	    
	    if (name != null) {
	        laptops = laptopService.searchLaptopByName(name);
	    } else if (price != null) {
	        laptops = laptopService.searchLaptopByPrice(price);
	    } else if (brand != null) {
	        laptops = laptopService.searchLaptopByBrand(brand);
	    } else {
	        // Handle case where no parameters are provided
	        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
	    }

	    return new ResponseEntity<>(laptops, HttpStatus.OK);
	}
}
	
x-----------------x-------------------------x----------------------------------------------------x

LaptopRepository


@Repository
public interface LaptopRepository extends JpaRepository<Laptop, Long>{
	List<Laptop> findByName(String name);

	List<Laptop> findByPrice(Double price);

	List<Laptop> findByBrand(String brand);
	
}
x-----------------x-------------------------x----------------------------------------------------x
